# Set Up:
#
#   ykman oath accounts add --touch arn:aws:iam::<account_id>:mfa/<iam_user>
#
# Environment (with direnv):
#
#   AWS_MFA_PROFILE=default
#   AWS_ROLE_ARN=arn:aws:iam::<account_id>:role/<role_name>
#   AWS_ROLE_SESSION_NAME=cli
#
# Usage:
#
#   aws-assume-role

local old_AWS_ACCESS_KEY_ID="$AWS_ACCESS_KEY_ID"
local old_AWS_SECRET_ACCESS_KEY="$AWS_SECRET_ACCESS_KEY"
local old_AWS_SESSION_TOKEN="$AWS_SESSION_TOKEN"
if [[ ! -z "$AWS_SESSION_TOKEN" ]]
then
  local old_aws_identity=$(aws sts get-caller-identity --query Arn --output text)
fi

unset AWS_ACCESS_KEY_ID
unset AWS_SECRET_ACCESS_KEY
unset AWS_SESSION_TOKEN

local aws_mfa_profile=$AWS_MFA_PROFILE
local aws_role_arn=$AWS_ROLE_ARN

if [[ ! -z "$AWS_PROFILE" ]]
then
  echo "Using AWS_PROFILE $AWS_PROFILE"
  if [[ -z "$aws_mfa_profile" ]]
  then
    aws_mfa_profile=$(aws configure get source_profile --profile $AWS_PROFILE)
    if [[ ! -z "$aws_mfa_profile" ]]
    then
      echo "Using source_profile $aws_mfa_profile (from $AWS_PROFILE) for MFA"
    fi
  fi
  if [[ -z "$aws_role_arn" ]]
  then
    aws_role_arn=$(aws configure get role_arn --profile $AWS_PROFILE)
    if [[ ! -z "$aws_role_arn" ]]
    then
      echo "Using role_arn $aws_role_arn (from $AWS_PROFILE)"
    fi
  fi
fi

if [[ -z "$aws_mfa_profile" ]]
then
  echo "Missing aws_mfa_profile or source_profile in AWS profile"
  return 1
fi

if [[ -z "$aws_role_arn" ]]
then
  echo "Missing aws_role_arn or role_arn in AWS profile"
  return 1
fi

local aws_role_session_name=${AWS_ROLE_SESSION_NAME:-cli}

local expected_assumed_identity="$(sed -e 's|:iam:|:sts:|' -e 's|:role/|:assumed-role/|' <<< $aws_role_arn)/$aws_role_session_name"

if [[ "$expected_assumed_identity" = "$old_aws_identity" ]]
then
  echo "Already assumed role $aws_role_arn"
  export AWS_ACCESS_KEY_ID="$old_AWS_ACCESS_KEY_ID"
  export AWS_SECRET_ACCESS_KEY="$old_AWS_SECRET_ACCESS_KEY"
  export AWS_SESSION_TOKEN="$old_AWS_SESSION_TOKEN"
  return 0
fi

local mfa_serial=$(aws --profile $aws_mfa_profile iam get-user | jq -r '.User.Arn' | sed -e 's|:user/|:mfa/|')
if [[ -z "$mfa_serial" ]]
then
  echo "Missing AWS user"
  return 1
fi
echo "Using MFA device $mfa_serial"

local token_code=$(ykman oath accounts code "$mfa_serial" -s)

json=$(AWS_PROFILE="$aws_mfa_profile" aws sts assume-role --role-arn "$aws_role_arn" --role-session-name "$aws_role_session_name" --serial-number "$mfa_serial" --token-code "$token_code" --duration-seconds 7200)
if [[ $? != 0 ]]
then
  echo "Could not assume role"
  return 1
fi

export AWS_ACCESS_KEY_ID=$(echo $json | jq -r .Credentials.AccessKeyId)
export AWS_SECRET_ACCESS_KEY=$(echo $json | jq -r .Credentials.SecretAccessKey)
export AWS_SESSION_TOKEN=$(echo $json | jq -r .Credentials.SessionToken)
