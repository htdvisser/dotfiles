#!/usr/bin/env zsh

zparseopts -D -E -K - \
  '-op_item_id':=flags \
  '-aws_access_key_id_field':=flags \
  '-aws_secret_access_key_field':=flags \
  '-mfa_serial':=flags \
  '-duration_seconds':=flags \
  || return 1

local aws_access_key_id_field="aws_access_key_id"
local aws_secret_access_key_field="aws_secret_access_key"
local mfa_serial
local duration_seconds="3600"

for flag val in "${(@)flags}"; do
  case $flag in

  --op_item_id)
    op_item_id=$val
  ;;

  --aws_access_key_id_field)
    aws_access_key_id_field=$val
  ;;

  --aws_secret_access_key_field)
    aws_secret_access_key_field=$val
  ;;

  --mfa_serial)
    mfa_serial=$val
  ;;

  --duration_seconds)
    duration_seconds=$val
  ;;

  esac
done

if [[ -z "$op_item_id" ]]
then
  echo "--op_item_id is required"
  return 1
fi

credentials_json=$(op item get $op_item_id --fields "label=$aws_access_key_id_field,label=$aws_secret_access_key_field" --format json \
  | jq "map({(.label): .value}) | add | {
  Version:1,
  AccessKeyId:.${aws_access_key_id_field},
  SecretAccessKey:.${aws_secret_access_key_field}
}")
if [[ $? != 0 || -z "$credentials_json" ]]; then
  echo "Could not get credentials from 1Password"
  return 1
fi

if [[ -z "$mfa_serial" ]]; then
  echo $credentials_json
  exit 0
fi

local token_code=$(op item get $op_item_id --otp)
if [[ $? != 0 || -z "$token_code" ]]; then
  echo "Could not get OTP code from 1Password"
  return 1
fi

local aws_access_key_id=$(echo $credentials_json | jq -r '.AccessKeyId')
local aws_secret_access_key=$(echo $credentials_json | jq -r '.SecretAccessKey')
local session_token_json=$(AWS_ACCESS_KEY_ID=$aws_access_key_id AWS_SECRET_ACCESS_KEY=$aws_secret_access_key aws sts get-session-token --serial-number "$mfa_serial" --token-code "$token_code" --duration-seconds "$duration_seconds")
if [[ $? != 0 || -z "$session_token_json" ]]; then
  echo "Could not get session token from AWS"
  return 1
fi

echo $session_token_json | jq "{
  Version:1,
  AccessKeyId:.Credentials.AccessKeyId,
  SecretAccessKey:.Credentials.SecretAccessKey,
  SessionToken:.Credentials.SessionToken,
  Expiration:.Credentials.Expiration
}"
